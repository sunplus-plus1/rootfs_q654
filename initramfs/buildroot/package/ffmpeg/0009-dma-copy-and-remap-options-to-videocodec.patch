diff -uNr ffmpeg-4.4.4.a/libavcodec/allcodecs.c ffmpeg-4.4.4.b/libavcodec/allcodecs.c
--- ffmpeg-4.4.4.a/libavcodec/allcodecs.c	2024-12-20 19:17:46.121819674 +0800
+++ ffmpeg-4.4.4.b/libavcodec/allcodecs.c	2024-12-20 19:18:18.079250446 +0800
@@ -925,7 +925,8 @@
     const AVCodec *p, *experimental = NULL;
     void *i = 0;
 
-    //Use hw codec for H264 and JPEG
+    id = remap_deprecated_codec_id(id);
+
     if(id == AV_CODEC_ID_H264){
         experimental = find_codec_by_name("h264_v4l2m2m", x);
     }
@@ -937,8 +938,6 @@
         return (AVCodec*)experimental;
     }
 
-    id = remap_deprecated_codec_id(id);
-
     while ((p = av_codec_iterate(&i))) {
         if (!x(p))
             continue;
diff -uNr ffmpeg-4.4.4.a/libavcodec/v4l2_buffers.c ffmpeg-4.4.4.b/libavcodec/v4l2_buffers.c
--- ffmpeg-4.4.4.a/libavcodec/v4l2_buffers.c	2023-04-02 23:21:32.000000000 +0800
+++ ffmpeg-4.4.4.b/libavcodec/v4l2_buffers.c	2024-12-20 19:18:26.877784047 +0800
@@ -34,6 +34,13 @@
 #include "v4l2_buffers.h"
 #include "v4l2_m2m.h"
 
+/****same with v4l2.c*****/
+struct buff_data {
+    struct video_data *s;
+    int index;
+    int v4l2_fd;
+};
+
 #define USEC_PER_SEC 1000000
 static AVRational v4l2_timebase = { 1, USEC_PER_SEC };
 
@@ -297,6 +304,78 @@
     return 0;
 }
 
+static int v4l2_bufref_to_buf_dma(V4L2Buffer *out, void* input_opaque, int size, int offset)
+{
+    unsigned int length;
+    int *data_ptr;
+    V4L2Context *ctx = out->context;
+    V4L2m2mPriv *priv = ctx->priv;
+    struct buff_data* buf_descriptor = input_opaque;
+    
+    struct v4l2_exportbuffer expbuf = {
+        .type = V4L2_BUF_TYPE_VIDEO_CAPTURE,
+        .plane = 0,
+        // .flags = O_CLOEXEC,
+    };
+    
+    struct v4l2_streamparm parm = {
+        .type = V4L2_BUF_TYPE_VIDEO_OUTPUT_MPLANE,
+	};
+
+    if(!priv || !priv->use_dma_copy)
+        return -1;
+   
+    if(!buf_descriptor || !buf_descriptor->v4l2_fd)
+        return -1;
+
+    if(out->buf.type != V4L2_BUF_TYPE_VIDEO_OUTPUT_MPLANE)
+        return -1;
+    
+    if(ctx->exp_fd[VIDEO_MAX_FRAME] == 0){
+        struct v4l2_capability cap;
+        ioctl(buf_descriptor->v4l2_fd, VIDIOC_QUERYCAP, &cap);
+
+        ctx->exp_fd[VIDEO_MAX_FRAME] = strcmp("sp_vin", cap.driver) ? -1 : 1;
+
+        if(ctx->exp_fd[VIDEO_MAX_FRAME] == -1){
+            av_log(logger(out), AV_LOG_WARNING, "DMA copy not support for %s\n", cap.driver);
+        }
+    }
+
+    if(ctx->exp_fd[VIDEO_MAX_FRAME] == -1)
+        return -1;
+
+    /* get the export fd of the dma buffer, release them when the video codec driver close */
+    if(!ctx->exp_fd[buf_descriptor->index]){
+        expbuf.index = buf_descriptor->index;
+        if (ioctl(buf_descriptor->v4l2_fd, VIDIOC_EXPBUF, &expbuf) < 0) {
+            av_log(logger(out), AV_LOG_ERROR, "expbuf failed\n");
+            return -1;
+        }
+        ctx->exp_fd[buf_descriptor->index] = expbuf.fd;
+    }
+
+    length = out->plane_info[0].length;
+
+    parm.parm.raw_data[99] = 0xf1;   //cmd, 1 bytes
+
+    data_ptr = (int*)&parm.parm.raw_data[100];
+    data_ptr[0] = buf_descriptor->index; //src buf idx
+    data_ptr[1] = ctx->exp_fd[buf_descriptor->index]; //src buf fd
+    data_ptr[2] = out->buf.index;  //dst buf idx
+    data_ptr[3] = FFMIN(size, length-offset); //size
+
+    // printf("u %d %d\n", out->exp_fd[buf_descriptor->index], out->buf.index);
+
+    /* let kernel to do dma copy */
+    if (ioctl(priv->context->fd, VIDIOC_S_PARM, &parm) < 0){
+        av_log(logger(out), AV_LOG_ERROR, "DMA copy failed, use memcpy!\n");
+        return -1;
+    }
+
+    return 0;
+}
+
 static int v4l2_buffer_buf_to_swframe(AVFrame *frame, V4L2Buffer *avbuf)
 {
     int i, ret;
@@ -386,7 +465,12 @@
                 h = AV_CEIL_RSHIFT(h, desc->log2_chroma_h);
             }
             size = frame->linesize[i] * h;
-            ret = v4l2_bufref_to_buf(out, 0, frame->data[i], size, offset);
+
+            /* use dma copy if the input v4l2 dma, such as sensor */
+            if(ret = v4l2_bufref_to_buf_dma(out, av_buffer_pool_buffer_get_buffer_opaque(frame->buf[i]), size, offset)){
+                ret = v4l2_bufref_to_buf(out, 0, frame->data[i], size, offset);
+            }
+
             if (ret)
                 return ret;
             offset += size;
@@ -434,7 +518,7 @@
     frame->color_range = v4l2_get_color_range(avbuf);
     frame->color_trc = v4l2_get_color_trc(avbuf);
     frame->pts = v4l2_get_pts(avbuf);
-    frame->pkt_dts = AV_NOPTS_VALUE;
+    frame->pkt_pts = frame->pts;
 
     /* these values are updated also during re-init in v4l2_process_driver_event */
     frame->height = avbuf->context->height;
diff -uNr ffmpeg-4.4.4.a/libavcodec/v4l2_context.c ffmpeg-4.4.4.b/libavcodec/v4l2_context.c
--- ffmpeg-4.4.4.a/libavcodec/v4l2_context.c	2024-12-20 19:17:37.473846722 +0800
+++ ffmpeg-4.4.4.b/libavcodec/v4l2_context.c	2024-12-20 19:18:35.182757853 +0800
@@ -713,6 +713,16 @@
 
 int ff_v4l2_context_set_format(V4L2Context* ctx)
 {
+    V4L2m2mPriv *priv = ctx->priv;
+    struct v4l2_format format;
+
+    if(priv->remap_sync){
+        format.fmt.raw_data[0] = 0xf1;
+        format.fmt.raw_data[1] = 0x01;
+        format.type = ctx->format.type;
+        ioctl(ctx_to_m2mctx(ctx)->fd, VIDIOC_S_FMT, &format);
+    }
+
     return ioctl(ctx_to_m2mctx(ctx)->fd, VIDIOC_S_FMT, &ctx->format);
 }
 
@@ -771,6 +781,8 @@
         }
     }
 
+    ctx->done = 0;
+
     av_log(logger(ctx), AV_LOG_DEBUG, "%s: %s %02d buffers initialized: %04ux%04u, sizeimage %08u, bytesperline %08u\n", ctx->name,
         V4L2_TYPE_IS_MULTIPLANAR(ctx->type) ? av_fourcc2str(ctx->format.fmt.pix_mp.pixelformat) : av_fourcc2str(ctx->format.fmt.pix.pixelformat),
         req.count,
diff -uNr ffmpeg-4.4.4.a/libavcodec/v4l2_context.h ffmpeg-4.4.4.b/libavcodec/v4l2_context.h
--- ffmpeg-4.4.4.a/libavcodec/v4l2_context.h	2023-04-13 02:01:50.000000000 +0800
+++ ffmpeg-4.4.4.b/libavcodec/v4l2_context.h	2024-12-20 19:18:41.307792379 +0800
@@ -92,6 +92,12 @@
      */
     int done;
 
+    /* reference back to V4L2m2mPriv */
+    void *priv;
+
+    /* export fd if the input is from v4l2 buffer */ 
+    int exp_fd[VIDEO_MAX_FRAME+1];
+
 } V4L2Context;
 
 /**
diff -uNr ffmpeg-4.4.4.a/libavcodec/v4l2_m2m.c ffmpeg-4.4.4.b/libavcodec/v4l2_m2m.c
--- ffmpeg-4.4.4.a/libavcodec/v4l2_m2m.c	2024-12-20 19:17:37.477846709 +0800
+++ ffmpeg-4.4.4.b/libavcodec/v4l2_m2m.c	2024-12-20 19:18:47.914326537 +0800
@@ -66,6 +66,7 @@
     void *log_ctx = s->avctx;
     int ret;
 
+    s->capture.priv = s->output.priv = s->priv;
     s->capture.done = s->output.done = 0;
     s->capture.name = "capture";
     s->output.name = "output";
diff -uNr ffmpeg-4.4.4.a/libavcodec/v4l2_m2m.h ffmpeg-4.4.4.b/libavcodec/v4l2_m2m.h
--- ffmpeg-4.4.4.a/libavcodec/v4l2_m2m.h	2024-12-20 19:17:41.961832685 +0800
+++ ffmpeg-4.4.4.b/libavcodec/v4l2_m2m.h	2024-12-20 19:18:54.011103814 +0800
@@ -78,6 +78,9 @@
     int num_capture_buffers;
 
     int spspps_to_idr;
+    int use_dma_copy;
+
+    int remap_sync;
 } V4L2m2mPriv;
 
 /**
diff -uNr ffmpeg-4.4.4.a/libavcodec/v4l2_m2m_dec.c ffmpeg-4.4.4.b/libavcodec/v4l2_m2m_dec.c
--- ffmpeg-4.4.4.a/libavcodec/v4l2_m2m_dec.c	2024-12-20 19:17:37.477846709 +0800
+++ ffmpeg-4.4.4.b/libavcodec/v4l2_m2m_dec.c	2024-12-20 19:19:03.830503553 +0800
@@ -197,7 +197,14 @@
     }
 
 dequeue:
-    return ff_v4l2_context_dequeue_frame(capture, frame, -1);
+    ret = ff_v4l2_context_dequeue_frame(capture, frame, -1);
+
+    /* if get nonezero packet when decode EOS, reinit the codec to restart. */
+    if(ret == AVERROR_EOF && s->buf_pkt.size){
+        ff_v4l2_m2m_codec_full_reinit(s);
+        return AVERROR(EAGAIN);
+    }
+    return ret;
 fail:
     av_packet_unref(&s->buf_pkt);
     return ret;
@@ -253,6 +260,8 @@
     V4L_M2M_DEFAULT_OPTS,
     { "num_capture_buffers", "Number of buffers in the capture context",
         OFFSET(num_capture_buffers), AV_OPT_TYPE_INT, {.i64 = 20}, 20, INT_MAX, FLAGS },
+    { "remap_sync", "Improve video buffer access speed by cache DMA to CPU", 
+        OFFSET(remap_sync), AV_OPT_TYPE_BOOL, {.i64 = 1 }, 0, 1, FLAGS },
     { NULL},
 };
 
diff -uNr ffmpeg-4.4.4.a/libavcodec/v4l2_m2m_enc.c ffmpeg-4.4.4.b/libavcodec/v4l2_m2m_enc.c
--- ffmpeg-4.4.4.a/libavcodec/v4l2_m2m_enc.c	2024-12-20 19:17:41.961832685 +0800
+++ ffmpeg-4.4.4.b/libavcodec/v4l2_m2m_enc.c	2024-12-20 19:19:10.778563433 +0800
@@ -320,6 +320,7 @@
     }
 #endif
 
+    s->output.priv = avctx->priv_data;
     return ff_v4l2_context_enqueue_frame(output, frame);
 }
 
@@ -471,8 +472,9 @@
 
 static const AVOption options[] = {
     V4L_M2M_CAPTURE_OPTS,
-    { "spspps_to_idr", "Add spspps to each key frame", \
-	OFFSET(spspps_to_idr), AV_OPT_TYPE_BOOL, {.i64 = 1 }, 0, 1, FLAGS },
+    { "spspps_to_idr",  "Add spspps to each key frame", 	                        OFFSET(spspps_to_idr),  AV_OPT_TYPE_BOOL, {.i64 = 1 }, 0, 1, FLAGS },
+    { "use_dma_copy",   "Use dma copy when video buffer is from DMA", 	            OFFSET(use_dma_copy),   AV_OPT_TYPE_BOOL, {.i64 = 1 }, 0, 1, FLAGS },
+    { "remap_sync",     "Improve video buffer access speed by cache DMA to CPU",    OFFSET(remap_sync),     AV_OPT_TYPE_BOOL, {.i64 = 1 }, 0, 1, FLAGS },
     { NULL },
 };
 
diff -uNr ffmpeg-4.4.4.a/libavcodec/vaapi_h264.c ffmpeg-4.4.4.b/libavcodec/vaapi_h264.c
--- ffmpeg-4.4.4.a/libavcodec/vaapi_h264.c	2024-12-20 19:17:19.553902768 +0800
+++ ffmpeg-4.4.4.b/libavcodec/vaapi_h264.c	2024-12-20 19:19:22.742571684 +0800
@@ -314,12 +314,12 @@
     H264SliceContext *sl = &h->slice_ctx[0];
     int ret;
 
-    if (pic->nb_slices == 0) {
-        ret = AVERROR_INVALIDDATA;
+	if (pic->nb_slices == 0) {
+	    ret = AVERROR_INVALIDDATA;
         goto finish;
     }
 
-    ret = ff_vaapi_decode_issue(avctx, pic);
+	ret = ff_vaapi_decode_issue(avctx, pic);
     if (ret < 0)
         goto finish;
 
diff -uNr ffmpeg-4.4.4.a/libavdevice/v4l2.c ffmpeg-4.4.4.b/libavdevice/v4l2.c
--- ffmpeg-4.4.4.a/libavdevice/v4l2.c	2023-04-13 02:01:50.000000000 +0800
+++ ffmpeg-4.4.4.b/libavdevice/v4l2.c	2024-12-20 19:19:31.034176239 +0800
@@ -108,6 +108,7 @@
 struct buff_data {
     struct video_data *s;
     int index;
+    int v4l2_fd;
 };
 
 static int device_open(AVFormatContext *ctx, const char* device_path)
@@ -579,6 +580,7 @@
         }
         buf_descriptor->index = buf.index;
         buf_descriptor->s     = s;
+        buf_descriptor->v4l2_fd = s->fd;
 
         pkt->buf = av_buffer_create(pkt->data, pkt->size, mmap_release_buffer,
                                     buf_descriptor, 0);
diff -uNr ffmpeg-4.4.4.a/libavutil/buffer.c ffmpeg-4.4.4.b/libavutil/buffer.c
--- ffmpeg-4.4.4.a/libavutil/buffer.c	2023-04-13 02:01:50.000000000 +0800
+++ ffmpeg-4.4.4.b/libavutil/buffer.c	2024-12-20 19:19:36.895910214 +0800
@@ -401,3 +401,9 @@
     av_assert0(buf);
     return buf->opaque;
 }
+
+void *av_buffer_pool_buffer_get_buffer_opaque(AVBufferRef *ref){
+    if(!ref) return NULL;
+    AVBuffer* buf = ref->buffer;
+    return buf ? buf->opaque : NULL;
+}
diff -uNr ffmpeg-4.4.4.a/libavutil/buffer.h ffmpeg-4.4.4.b/libavutil/buffer.h
--- ffmpeg-4.4.4.a/libavutil/buffer.h	2023-04-13 02:01:50.000000000 +0800
+++ ffmpeg-4.4.4.b/libavutil/buffer.h	2024-12-20 19:19:41.843268998 +0800
@@ -347,6 +347,11 @@
 void *av_buffer_pool_buffer_get_opaque(AVBufferRef *ref);
 
 /**
+ * Get the AVBuffer opaque parameter of the AVBufferRef.
+ */
+void *av_buffer_pool_buffer_get_buffer_opaque(AVBufferRef *ref);
+
+/**
  * @}
  */
 
